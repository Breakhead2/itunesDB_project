–ассмотрим эффективность ранее выполненых сложных запросов с использованием JOIN 
и попробуем их оптимизировать.

¬ данном случае мы будем разбирать запрос на 10 самых попул€рых песен у пользовател€

ƒл€ начала посмотрим на акутальный план построени€ запроса и разберем его.
¬ыполнив следующую команду:

EXPLAIN ANALYZE SELECT
	songs.singer as songs_singer,
	songs.name as songs_name,
	songs.listening_counter as listening_counter
	FROM songs_users
		JOIN songs ON songs_users.song_id = songs.id
		LEFT JOIN users ON songs_users.user_id = users.id
	WHERE users.first_name = 'Riley' AND users.last_name = 'Farmer'
ORDER BY songs.listening_counter DESC
LIMIT 10;

» увидим древовидную структуру выполнени€ запроса:

                                                             QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6.12..6.12 rows=1 width=38) (actual time=0.221..0.225 rows=3 loops=1)
   ->  Sort  (cost=6.12..6.12 rows=1 width=38) (actual time=0.219..0.222 rows=3 loops=1)
         Sort Key: songs.listening_counter DESC
         Sort Method: quicksort  Memory: 25kB
         ->  Nested Loop  (cost=3.66..6.11 rows=1 width=38) (actual time=0.117..0.161 rows=3 loops=1)
               ->  Hash Join  (cost=3.51..5.79 rows=1 width=4) (actual time=0.088..0.122 rows=3 loops=1)
                     Hash Cond: (songs_users.user_id = users.id)
                     ->  Seq Scan on songs_users  (cost=0.00..2.00 rows=100 width=8) (actual time=0.010..0.026 rows=100 loops=1)
                     ->  Hash  (cost=3.50..3.50 rows=1 width=4) (actual time=0.043..0.043 rows=1 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on users  (cost=0.00..3.50 rows=1 width=4) (actual time=0.018..0.034 rows=1 loops=1)
                                 Filter: (((first_name)::text = 'Riley'::text) AND ((last_name)::text = 'Farmer'::text))
                                 Rows Removed by Filter: 99
               ->  Index Scan using songs_pkey on songs  (cost=0.14..0.32 rows=1 width=42) (actual time=0.010..0.010 rows=1 loops=3)
                     Index Cond: (id = songs_users.song_id)
 Planning Time: 2.659 ms
 Execution Time: 0.426 ms


—оздание составного индакса на колонки first_name и last_name таблицы ѕользователи:

CREATE INDEX users_first_name_last_name_idx ON users (first_name, last_name);


                                                             QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6.12..6.12 rows=1 width=38) (actual time=0.099..0.101 rows=3 loops=1)
   ->  Sort  (cost=6.12..6.12 rows=1 width=38) (actual time=0.098..0.100 rows=3 loops=1)
         Sort Key: songs.listening_counter DESC
         Sort Method: quicksort  Memory: 25kB
         ->  Nested Loop  (cost=3.66..6.11 rows=1 width=38) (actual time=0.070..0.093 rows=3 loops=1)
               ->  Hash Join  (cost=3.51..5.79 rows=1 width=4) (actual time=0.062..0.079 rows=3 loops=1)
                     Hash Cond: (songs_users.user_id = users.id)
                     ->  Seq Scan on songs_users  (cost=0.00..2.00 rows=100 width=8) (actual time=0.007..0.015 rows=100 loops=1)
                     ->  Hash  (cost=3.50..3.50 rows=1 width=4) (actual time=0.034..0.034 rows=1 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on users  (cost=0.00..3.50 rows=1 width=4) (actual time=0.011..0.030 rows=1 loops=1)
                                 Filter: (((first_name)::text = 'Riley'::text) AND ((last_name)::text = 'Farmer'::text))
                                 Rows Removed by Filter: 99
               ->  Index Scan using songs_pkey on songs  (cost=0.14..0.32 rows=1 width=42) (actual time=0.003..0.003 rows=1 loops=3)
                     Index Cond: (id = songs_users.song_id)
 Planning Time: 0.394 ms
 Execution Time: 0.138 ms

